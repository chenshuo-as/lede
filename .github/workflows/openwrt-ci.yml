#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'OpenWrt-CI'
        required: false
        default: 'false'
        
env:
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master   

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
           #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          cat >> .config <<EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7621=y
          CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_redmi-router-ac2100=y
          
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          
          
          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig          

      - name: Load Settings.ini
        run: |
          cp -f devices/default-settings package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
          if [ -f "devices/default-settings" ]; then
            echo >> package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
            cat devices/default-settings >> package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
          fi 

      - name: Default PPPOE Setting
        if: env.PPPOE_USERNAME && env.PPPOE_PASSWD
        run: |
          sed -i '$i uci set network.wan.proto=pppoe ' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
          sed -i '$i uci set network.wan.username=${{ env.PPPOE_USERNAME }}' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
          sed -i '$i uci set network.wan.password=${{ env.PPPOE_PASSWD }}' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings     
          sed -i '$i uci commit network' openwrt/package/*/*/default-settings/root/etc/uci-defaults/99-default-settings
          
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Get current date
        run: |
          echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
          echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
          echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
          echo "date4=$(date +'%m.%d.%Y')" >> $GITHUB_ENV

      - name: Organize files
        run: |
          mkdir firmware && find openwrt/bin/targets/*/*/ -maxdepth 1 \
          -name "*combined*" \
          -or -name "*sysupgrade*" \
          -or -name "*armvirt-64-default-rootfs*" \
          -or -name "sha256sums" \
          | xargs -i mv -f {} ./firmware/
          cp openwrt/.config  ./firmware/redmi-ac2100.config
          cd firmware
          echo ${{ env.date4 }} > version.txt
          mv sha256sums redmi-ac2100_sha256sums
          rename -v "s/^openwrt/${{ env.date3 }}-openwrt/" *
          rename -v "s/xiaomi_redmi-router/redmi/" *bin
          rename -v "s/(d-team_|xiaoyu_)//" *bin
          rename -v "s/friendlyarm_//" *gz
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
          RANDOM=$$$(date +%s)
          rand=$[$RANDOM % ${#Emoji[@]}]
          echo "EMOJI=${Emoji[$rand]}" >> $GITHUB_ENV

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
           name: ${{ env.date3 }} redmi-ac2100
           path: ${{ env.FIRMWARE }}
     
      - name: Create release
        run: |
           touch release.txt
           echo -e "redmi-ac2100 🚀:\n" >> release.txt
         
      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        env:
           GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          files: "${{ env.FIRMWARE }}/*"
          name: ${{ env.date2 }} redmi-ac2100 ${{ env.EMOJI }}
          tag_name: ${{ env.date }}_redmi-ac2100
          body_path: release.txt
           
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
           retain_days: 14
           keep_minimum_runs: 8

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
           keep_latest: 15
           delete_tags: true
        env:
           GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
